// Generated by dts-bundle v0.7.3

declare module 'mp-inject' {
    export { Injector } from "mp-inject/injector";
    export { inject, injectable, injectFor, injectSelf } from "mp-inject/inject";
}

declare module 'mp-inject/injector' {
    import { IConfigOptions } from "mp-inject/config";
    export type RegisterType = Function;
    export class Injector {
        static register(type: RegisterType, value: any): void;
        static get<T = any>(type: RegisterType, ...args: any[]): T;
        static config(options: IConfigOptions): void;
        static bindProperties(thisArg: any, forcibly?: boolean): void;
    }
}

declare module 'mp-inject/inject' {
    import { IConfigOptions } from "mp-inject/config";
    import { RegisterType } from "mp-inject/injector";
    interface IInjectOptions {
        args?: any[];
        type?: RegisterType;
    }
    export function inject(options?: IInjectOptions | RegisterType): (target: any, name: string, index?: number) => void;
    export function injectable(options?: IConfigOptions): (ctor: new (...args: any) => any) => any;
    export function injectFor(type?: RegisterType): (ctor: new (...args: any) => any) => void;
    export function injectSelf(): (ctor: new (...args: any) => any) => void;
    export {};
}

declare module 'mp-inject/config' {
    export interface IConfigOptions {
        propertiesBinder?: string | ((ctor: new (...args: any) => any) => string);
        bindPropertiesInConstructor?: boolean;
    }
    export const defaultConfigOptions: {
        bindPropertiesInConstructor: boolean;
    };
}

