{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/manager.ts","webpack:///./src/index.ts","webpack:///./src/inject.ts"],"names":[],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;AClFA,IAAM,YAAY,GAAG,IAAI,OAAO,EAAY,CAAC;AAI7C;IAAA;IAuCA,CAAC;IArCG;;;;;;;;;OASG;IACW,uBAAQ,GAAtB,UACI,IAAoB,EACpB,KAAgC;QAChC,YAAY,CAAC,GAAG,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IAClC,CAAC;IAED;;;;;;;;;OASG;IACW,kBAAG,GAAjB,UACI,IAAoB;QAAE,cAAc;aAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;YAAd,6BAAc;;QACpC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;YACzB,MAAM,IAAI,KAAK,CAAC,kBAAgB,IAAI,eAAY,CAAC,CAAC;SACrD;QACD,IAAI,KAAK,GAAG,YAAY,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACnC,IAAI,OAAO,KAAK,KAAK,UAAU,EAAE;YAC7B,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;SACnC;QACD,OAAO,KAAK,CAAC;IACjB,CAAC;IACL,qBAAC;AAAD,CAAC;AAvCY,wCAAc;;;;;;;;;;ACJ3B,uCAA2C;AAAlC,iDAAc;AACvB,sCAA8C;AAArC,gCAAM;AAAE,wCAAU;;;;;;;;;;;;;;;;;ACA3B,uCAA2C;AAE3C,IAAM,WAAW,GAAG,aAAa,CAAC;AAElC;;;;;GAKG;AACH,SAAgB,MAAM,CAAC,IAAU;IAAE,cAAc;SAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;QAAd,6BAAc;;IAC7C,OAAO,UAAS,MAAW,EAAE,IAAY;QACrC,IAAM,CAAC,GAAG,IAAI,IAAK,OAAe,CAAC,WAAW,CAAC,WAAW,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;QAC1E,IAAM,KAAK,GAAG,wBAAc,CAAC,GAAG,OAAlB,wBAAc,kBAAK,CAAC,GAAK,IAAI,EAAC,CAAC;QAC7C,IAAI,CAAC,KAAK,EAAE;YAAE,OAAO;SAAE;QACvB,MAAM,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC;IACzB,CAAC,CAAC;AACN,CAAC;AAPD,wBAOC;AAED;;;;GAIG;AACH,SAAgB,UAAU,CACL,KAA+D;IAChF,OAAO,UAAS,IAAS;QACrB,KAAK,GAAG,KAAK,KAAK,SAAS,CAAC,CAAC,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC;QACjD,wBAAc,CAAC,QAAQ,CAAC,IAAI,EAAE,KAAM,CAAC,CAAC;IAC1C,CAAC,CAAC;AACN,CAAC;AAND,gCAMC","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","const INJECT_ITEMS = new WeakMap<any, any>();\n\nexport type INJECT_TYPE<T = any> = new (...args: any[]) => T | ((...args: any[]) => T);\n\nexport class ServiceManager {\n\n    /**\n     * Register a service for injection.\n     * @param type The service type to be register\n     * @param value The associated value can be a factory function.\n     *\n     * @example\n     * ServiceManager.register(String, \"default value\");\n     *\n     * ServiceManager.register(Number, () => Math.random());\n     */\n    public static register<T>(\n        type: INJECT_TYPE<T>,\n        value: T | ((...args: any) => T)): void {\n        INJECT_ITEMS.set(type, value);\n    }\n\n    /**\n     * Get the value corresponding to a specific type, the type must be registered in advance.\n     * @param type The type registered.\n     * @param args The parameters required by the factory function.\n     *\n     * @example\n     * class Demo{}\n     * ServiceManager.register(Demo, new Demo());\n     * const instance = ServiceManager.get(Demo);\n     */\n    public static get<T>(\n        type: INJECT_TYPE<T>, ...args: any[]): T {\n        if (!INJECT_ITEMS.has(type)) {\n            throw new Error(`Missing type ${type} injection`);\n        }\n        let value = INJECT_ITEMS.get(type);\n        if (typeof value === \"function\") {\n            value = value.apply(null, args);\n        }\n        return value;\n    }\n}\n","export { ServiceManager } from \"./manager\";\nexport { inject, injectable } from \"./inject\";\n","\nimport { ServiceManager } from \"./manager\";\n\nconst DESIGN_TYPE = \"design:type\";\n\n/**\n * Identifying an property as an injection property is automatically bound to the prototype object.\n * @param type The type to be injected, by default, the field type is automatically obtained.\n * In some cases, it cannot be obtained automatically, and the type needs to be specified explicitly.\n * @param args The parameters required by the factory function.\n */\nexport function inject(type?: any, ...args: any[]) {\n    return function(target: any, name: string) {\n        const t = type || (Reflect as any).getMetadata(DESIGN_TYPE, target, name);\n        const value = ServiceManager.get(t, ...args);\n        if (!value) { return; }\n        target[name] = value;\n    };\n}\n\n/**\n * Registering a type into an injection collection,\n * by default, creates an instance of that class by calling the constructor of the current class.\n * @param value The value to be bound, the value can be a specified value, or it can be a function with a return value.\n */\nexport function injectable<T extends new (...args: any) =>\n    InstanceType<T>>(value?: InstanceType<T> | ((...args: any[]) => InstanceType<T>)): any {\n    return function(ctor: any) {\n        value = value === undefined ? new ctor() : value;\n        ServiceManager.register(ctor, value!);\n    };\n}\n"],"sourceRoot":""}