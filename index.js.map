{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/injector.ts","webpack:///external \"tslib\"","webpack:///./src/constants.ts","webpack:///./src/reflect.ts","webpack:///./src/index.ts","webpack:///./src/config.ts","webpack:///(webpack)/buildin/global.js","webpack:///external \"reflect-metadata\"","webpack:///./src/inject.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","import { defaultConfigOptions, IConfigOptions } from \"./config\";\nimport { GLOBAL_CONFIG_KEY, INJECTED_CLASS_TAG, INJECTED_PROPERTIES } from \"./constants\";\nimport reflect from \"./reflect\";\n\n// tslint:disable-next-line\nexport type RegisterType = Function | symbol | number | string;\n\nconst INJECT_ITEMS = new Map<RegisterType, [InstanceType<any>, IRegisterOptions?, any?]>();\n\nexport interface IRegisterOptions {\n    /**\n     * Whether it is a singleton pattern\n     * @default false\n     * @since 2.1.0\n     */\n    singleton?: boolean;\n}\n\nexport class Injector {\n\n    /**\n     * Register a service for injection.\n     * @param type The service type to be register.\n     * @param value The associated value can be a factory function.\n     * @param options The registration options.\n     *\n     * @example\n     * Injector.register(\"\", \"default value\");\n     * Injector.register(0, () => Math.random());\n     * class Demo{}\n     * Injector.register(Demo, new Demo());\n     */\n    public static register(type: RegisterType, value: any, options?: IRegisterOptions): void {\n        const validTypes = ['function', 'number', 'string', 'symbol'];\n        const valid = validTypes.indexOf(typeof type) >= 0;\n        if (!valid) { throw new TypeError(`The 'type' parameter must be in ${validTypes}.`); }\n        const factory = typeof value === \"function\" ? value : () => value;\n        INJECT_ITEMS.set(type, [factory, options]);\n    }\n\n    /**\n     * Get the value corresponding to a specific type, the type must be registered in advance.\n     * @param type The type registered.\n     * @param args The parameters required by the factory function.\n     *\n     * @example\n     * class Demo{}\n     * Injector.register(\"demo\", new Demo());\n     * const instance = ServiceManager.get(\"demo\");\n     * const typedInstance = ServiceManager.get<Demo>(\"demo\");\n     */\n    public static get<T = any>(type: RegisterType, ...args: any[]): T {\n        if (!INJECT_ITEMS.has(type)) {\n            const name = typeof type === 'function' ? type.name : String(type);\n            throw new Error(`Missing type ${name} injection`);\n        }\n        const [factory, options, instance] = INJECT_ITEMS.get(type);\n        const prototype = factory.prototype;\n        const singleton = type instanceof Object && options && options.singleton;\n        if (singleton && instance !== undefined) {\n            return instance;\n        }\n        let result;\n        if (prototype && reflect.hasMetadata(INJECTED_CLASS_TAG, prototype)) {\n            result = new factory(...args);\n        } else {\n            result = factory.apply(null, args);\n        }\n        // tslint:disable-next-line\n        singleton && (INJECT_ITEMS.get(type)[2] = result);\n        return result;\n    }\n\n    /**\n     * Clear singleton of specified type, if type is omitted, clear all singletons of type.\n     * @param type The specified type to clear\n     */\n    public static clearSingletons(type?: RegisterType) {\n        if (type === undefined) {\n            Array.from(INJECT_ITEMS.keys()).forEach(Injector.clearSingletons);\n        } else if (INJECT_ITEMS.has(type)) {\n            INJECT_ITEMS.get(type)[2] = undefined;\n        } else {\n            const name = typeof type === 'function' ? type.name : String(type);\n            throw new Error(`Missing type ${name} injection to clear`);\n        }\n    }\n\n    /**\n     * Set global injection options\n     * @param options injection options\n     * @param target injection target\n     */\n    public static config(options: IConfigOptions, target?: RegisterType) {\n        if (typeof target === \"function\") {\n            target.prototype[GLOBAL_CONFIG_KEY] = options;\n        } else {\n            Object.assign(defaultConfigOptions, options);\n        }\n    }\n\n    /**\n     * Binding injected property members\n     * @param instance instance object\n     * @param prototype prototype object\n     */\n    public static bindProperties(instance: any, prototype: object) {\n        const properties: any[] = reflect.getMetadata(INJECTED_PROPERTIES, prototype);\n        if (!properties) { return; }\n        properties.forEach(({ name, type, args }) => {\n            try {\n                instance[name] = Injector.get(type, ...args);\n            } catch (err) {\n                console.error(name, prototype.constructor.name, err);\n            }\n        });\n    }\n\n    /**\n     * Get global config options.\n     * @param target injection target.\n     * @param options inection options.\n     */\n    public static getConfig(target?: any, options?: IConfigOptions): IConfigOptions {\n        target = target || {};\n        const prototype = typeof target === \"function\" ? target.prototype : Object.getPrototypeOf(target);\n        return Object.assign({},\n            defaultConfigOptions,\n            prototype[GLOBAL_CONFIG_KEY],\n            options);\n    }\n}\n","module.exports = require(\"tslib\");","export const DESIGN_PARAM_TYPES = \"design:paramtypes\";\nexport const DESIGN_TYPE = \"design:type\";\nexport const DESIGN_RETURN_TYPE = \"design:returntype\";\nexport const INJECTED_PROPERTIES = Symbol(\"injected properties\");\nexport const INJECTED_ARGUMENTS = Symbol(\"injected arguments\");\nexport const INJECTED_CLASS_TAG = Symbol(\"injected class tag\");\nexport const GLOBAL_CONFIG_KEY = Symbol(\"global config key\");\n","declare const global: any;\nimport \"reflect-metadata\";\n\nfunction isValid(obj: any) {\n    return typeof obj === \"object\" && typeof obj.getMetadata === \"function\";\n}\n\nconst reflect: typeof Reflect = (function() {\n    if (isValid(Reflect)) {\n        return Reflect;\n    } else if (isValid(global.Reflect)) {\n        return global.Reflect;\n    } else if (isValid(global.global && global.global.Reflect)) {\n        return global.global.Reflect;\n    }\n    return {};\n}());\nexport default reflect;\n","export { Injector } from \"./injector\";\nexport { inject, injectable, injectFor, injectSelf } from \"./inject\";\n","export interface IConfigOptions {\n    /**\n     * The method name to bind properties, default use constructor.\n     * @default 'constructor'\n     */\n    propertiesBinder?: string;\n}\n\nexport const defaultConfigOptions = {\n    propertiesBinder: \"constructor\",\n};\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","module.exports = require(\"reflect-metadata\");","\nimport { IConfigOptions } from \"./config\";\nimport {\n    DESIGN_PARAM_TYPES, DESIGN_TYPE, INJECTED_ARGUMENTS, INJECTED_CLASS_TAG,\n    INJECTED_PROPERTIES,\n} from \"./constants\";\nimport { Injector, IRegisterOptions, RegisterType } from \"./injector\";\nimport reflect from \"./reflect\";\n\ninterface IInjectOptions {\n    /**\n     * The parameters required by the factory function.\n     */\n    args?: any[];\n    /**\n     * The type to register\n     */\n    type?: RegisterType;\n}\n\ninterface IInjectedProperty {\n    type: any;\n    args: any[];\n    name: string;\n}\n\ninterface IInjectedArgument extends IInjectedProperty {\n    index: number;\n}\n\n/**\n * Tag arguments or properties to inject.\n */\nexport function inject(options?: IInjectOptions | RegisterType) {\n    function bindInjections<T extends IInjectedProperty>(metadataKey: symbol, metadataValue: T, target: object) {\n        let arr = reflect.getMetadata(metadataKey, target);\n        arr = arr ? arr.slice() : [];\n        arr.push(metadataValue);\n        reflect.defineMetadata(metadataKey, arr, target);\n    }\n    const opts = typeof options === \"object\" ? Object.assign({}, options) : { type: options };\n    return function (target: any, name: string, index?: number) {\n        let { type, args } = opts as IInjectOptions;\n        args = Array.isArray(args) ? args : [];\n        const ctor = target.constructor;\n        if (typeof index === 'number') {\n            // params decorator\n            if (type === undefined) {\n                const types = reflect.getMetadata(DESIGN_PARAM_TYPES, target, name);\n                type = types[index];\n                if (typeof type !== \"function\") {\n                    throw new Error(`Unknown argument type of [${ctor.name}|${index}].`);\n                }\n            }\n            bindInjections(INJECTED_ARGUMENTS, { type, args, name, index }, target);\n        } else if (typeof target !== \"function\") {\n            // properties decorator\n            if (type === undefined) {\n                type = reflect.getMetadata(DESIGN_TYPE, target, name);\n                if (typeof type !== \"function\") {\n                    throw new Error(`Unknown property type of [${ctor.name}|${name}].`);\n                }\n            }\n            bindInjections(INJECTED_PROPERTIES, { type, args, name }, target);\n        }\n    };\n}\n\n/**\n * Automatically inject properties or constructor arguments for the current class\n */\nexport function injectable(options?: IConfigOptions) {\n    function bindProperties(ctor: new (...args: any) => void, method: string) {\n        const original = ctor.prototype[method];\n        if (typeof original === \"function\" || original === undefined) {\n            ctor.prototype[method] = function (...methodArgs: any) {\n                Injector.bindProperties(this, ctor.prototype);\n                return original && original.apply(this, methodArgs);\n            };\n        }\n    }\n    return function (ctor: new (...args: any) => any): any {\n        const { propertiesBinder } = Injector.getConfig(ctor, options);\n        reflect.defineMetadata(INJECTED_CLASS_TAG, true, ctor.prototype);\n        const bindPropertiesInConstructor = propertiesBinder === \"constructor\";\n        const hasProperties = reflect.hasMetadata(INJECTED_PROPERTIES, ctor.prototype);\n        if (!bindPropertiesInConstructor && hasProperties && typeof propertiesBinder === \"string\") {\n            bindProperties(ctor, propertiesBinder);\n        }\n        const hasArguments = reflect.hasMetadata(INJECTED_ARGUMENTS, ctor);\n        if (hasProperties && bindPropertiesInConstructor || hasArguments) {\n            return class extends ctor {\n                constructor(...newArgs: any) {\n                    const injectedArgs: IInjectedArgument[] = reflect.getMetadata(INJECTED_ARGUMENTS, ctor) || [];\n                    injectedArgs.filter(({ index }) => newArgs[index] === undefined)\n                        .forEach(({ index, args, type }) => newArgs[index] = Injector.get(type, ...args));\n                    super(...newArgs);\n                    // tslint:disable-next-line\n                    hasProperties && bindPropertiesInConstructor && Injector.bindProperties(this, ctor.prototype);\n                }\n            };\n        }\n    };\n}\n\n/**\n * Register the current class as a service of the specified type\n * @param type The type to register\n * @param options The injection options\n */\nexport function injectFor(type: RegisterType, options?: IRegisterOptions) {\n    return function (ctor: new (...args: any) => any) {\n        Injector.register(type || ctor, function (...ctorArguments: any[]) {\n            return new ctor(...ctorArguments);\n        }, options);\n    };\n}\n\n/**\n * Register the current class as a service of the self type\n * @param options The injection options\n */\nexport function injectSelf(options?: IRegisterOptions) {\n    return injectFor(null, options);\n}\n"],"sourceRoot":""}